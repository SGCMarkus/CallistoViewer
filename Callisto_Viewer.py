# Form implementation generated from reading ui file 'callistoViewer.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import os, sys
from pathlib import Path
import pycurl
from io import BytesIO
import re
import wget

import numpy as np
from scipy.optimize import curve_fit

from PyQt6 import QtCore, QtGui, QtWidgets
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import cm

from astropy.io import fits

from matplotlib.backend_bases import MouseButton
from matplotlib.backends.backend_qtagg import (
    FigureCanvas, NavigationToolbar2QT as NavigationToolbar)
from matplotlib.figure import Figure

from callistoViewerMainWindow import Ui_callistoViewerMain
from CalWidget import CalWidget

from dataclasses import dataclass

CALLISTO_BASE_URL = "http://soleil.i4ds.ch/solarradio/callistoQuicklooks/"

@dataclass
class LocationNameSet:
    name: str
    channel: set[str]

@dataclass
class UrlFileNameSet:
    url: str
    filePath: str = ""

@dataclass
class Point:
    X: float
    Y: float

def exponentialFit(x, A, b):
    return A * np.exp(b * x)


class CallistoViewerWindow(QtWidgets.QMainWindow, Ui_callistoViewerMain):

    locations: dict[str, LocationNameSet]
    totalListUrls: dict[str, UrlFileNameSet]
    currentListUrls: dict[str, str]
    plotPoints: list[Point]
    drawnPlotPoints: list

    def __init__(self, *args, obj=None, **kwargs):
        super(CallistoViewerWindow, self).__init__(*args, **kwargs)
        self.totalListUrls: dict[str, UrlFileNameSet] = dict()
        self.currentListUrls: dict[str, str] = dict()
        self.plotPoints: list[Point] = list()
        self.drawnPlotPoints = list()
        self.dataAvailable: bool = False

        self.setupUi(self)
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        self.calendarWidget = CalWidget(parent=self.centralwidget)
        self.calendarWidget.setObjectName("calendarWidget")
        self.calendarWidget.setSizePolicy(sizePolicy)
        self.calendarWidget.setFixedWidth(91)
        self.calWidgetLayout.addWidget(self.calendarWidget)
        
        self.callistoDataList.setFixedWidth(270)

        self.curFig = Figure(figsize=(5,5))
        self.curFigAxis = self.curFig.add_subplot()
        self.curFig.canvas.mpl_connect("button_press_event", self.onFigureClick)

        fc = FigureCanvas(self.curFig)
        toolbar = NavigationToolbar(fc, self)
        
        self.rightPanelMiddleLayout.addWidget(toolbar)
        self.rightPanelMiddleLayout.addWidget(fc)
        
        self.saveAsButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.saveAsButton.setObjectName("saveAsButton")
        self.saveAsButton.setText("Save as")
        self.rightPanelBottomLayout.addWidget(self.saveAsButton)

        self.resetButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.resetButton.setObjectName("resetButton")
        self.resetButton.setText("reset")
        self.rightPanelBottomLayout.addWidget(self.resetButton)

        self.calculateVelocityButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.calculateVelocityButton.setObjectName("calculateVelocityButton")
        self.calculateVelocityButton.setText("Calculate velocity")
        self.rightPanelBottomLayout.addWidget(self.calculateVelocityButton)
        
        self.fetchDataButton.clicked.connect(self.fetchData_clicked)
        self.sourceFilterComboBox.currentIndexChanged['int'].connect(self.sourceFilterComboBox_indexChanged)
        self.callistoDataList.currentItemChanged.connect(self.callistoDataList_currentItemChanged)
        self.resetButton.clicked.connect(self.reset_clicked)
        self.calculateVelocityButton.clicked.connect(self.calculateVelocity_clicked)

    def fetchData_clicked(self):
        selYear = self.calendarWidget.selectedDate.toString("yyyy")
        selMonth = self.calendarWidget.selectedDate.toString("MM")
        selDay = self.calendarWidget.selectedDate.toString("dd")
    
        buffer = BytesIO()
        parseUrl = CALLISTO_BASE_URL + "?date=" + selYear + selMonth + selDay

        curl = pycurl.Curl()
        curl.setopt(curl.URL, parseUrl)
        curl.setopt(curl.WRITEDATA, buffer)
        curl.perform()
        curl.close()
    
        body = buffer.getvalue()
        body = body.decode("iso-8859-1")
        
        loc = self.locations[self.sourceFilterComboBox.currentData(2)].name
        channel = self.sourceChannelFilterComboBox.currentData(2)
        
        if channel == "All":
            channel = "[0-9][0-9]"

        pattern = f"../data/2002-20yy_Callisto/{selYear}/{selMonth}/{selDay}/"+\
                  f"{loc}_{selYear}{selMonth}{selDay}_[0-9]*_{channel}.fit.gz"
        print(pattern)
        hits = re.findall(pattern, body)
        choices = sorted(set(hits))

        self.currentListUrls.clear()
        for c in choices:
            if c[38:-7] not in self.totalListUrls:
                self.totalListUrls[c[38:-7]] = UrlFileNameSet(c)

            self.currentListUrls[c[38:-7]] = c

        self.callistoDataList.clear()
        self.callistoDataList.addItems(self.currentListUrls)

    def sourceFilterComboBox_indexChanged(self, index):
        print(str(index) + " " + str(self.sourceFilterComboBox.itemData(index, 2)))
        self.sourceChannelFilterComboBox.clear()
        if len(self.locations[self.sourceFilterComboBox.itemData(index, 2)].channel) > 1:
            self.sourceChannelFilterComboBox.addItem("All")

        for c in self.locations[self.sourceFilterComboBox.itemData(index, 2)].channel:
            self.sourceChannelFilterComboBox.addItem(c)
    

    def callistoDataList_currentItemChanged(self, item):
        if item is None:
            return

        name = item.data(2)
        url = self.totalListUrls[name].url
        filePath = ""

        try:
            os.mkdir("fits")
        except:
            print("Failed to create fits folder")


        if not self.totalListUrls[name].filePath:
            filePath = str(Path(f"fits/{name}.fit.gz"))
            if not os.path.exists(filePath):
                wget.download(CALLISTO_BASE_URL + url, filePath)
            self.totalListUrls[name].filePath = filePath
        else:
            filePath = self.totalListUrls[name].filePath

        self.plotFits(filePath)

    def resizeEvent(self, event):
        super(CallistoViewerWindow, self).resizeEvent(event)

    def setupLocations(self, locations: dict[str, LocationNameSet]):
        self.locations = locations
        for k in locations:
            self.sourceFilterComboBox.addItem(k)

    def plotFits(self, filePath):
        fds = fits.open(filePath)

        data = fds[0].data
        freqs = fds[1].data['frequency'][0]
        time = fds[1].data['time'][0]
        fds.close()

        data = data - data.mean(axis=1, keepdims=True) + 4 # subtract mean and add offset (1...50)
        data = data.clip(-5,120) # limit peak values
        data = data * 2500.0/255.0/25.4 # digit->dB

        extent = (time[0], time[-1], freqs[-1], freqs[0])

        self.plotPoints.clear()
        self.curFigAxis.clear()
        self.curFigAxis.imshow(data, aspect = 'auto', extent = extent,cmap=cm.gnuplot2)
        self.curFigAxis.set_xlabel('Time [s]')
        self.curFigAxis.set_ylabel('Frequency [MHz]')
        self.curFigAxis.set_title('Type III burst with background subtracted')
        self.curFig.canvas.draw_idle()

        self.dataAvailable = True
        
    def onFigureClick(self, event):
        if(not self.dataAvailable):
            print("No data available, select a fit first!")
            return
        if(event.button is not MouseButton.LEFT):
            return

        p = Point(event.xdata, event.ydata)
        self.plotPoints.append(p)

        drawnPoint = self.curFigAxis.plot(p.X, p.Y, 'r+')[0]
        self.drawnPlotPoints.append(drawnPoint)
        self.curFig.canvas.draw_idle()

        return

    def saveAs_clicked(self):

        return

    def reset_clicked(self):
        self.plotPoints.clear()

        for p in self.drawnPlotPoints:
            p.remove()
        self.drawnPlotPoints.clear()
        self.curFig.canvas.draw_idle()


    def calculateVelocity_clicked(self):
        xdata = []; ydata = []
        for p in self.plotPoints:
            xdata.append(p.X)
            ydata.append(p.Y)

        xdata = np.array(xdata)
        ydata = np.array(ydata)

        params, cv = curve_fit(exponentialFit, xdata, ydata, p0=(7, 1e-6))

        print(f"xdata: {xdata}, ydata: {ydata}")
        print(f"{params}")
        print(f"{cv}")

        plotX = np.linspace(xdata[0], xdata[-1], 200)

        fit = self.curFigAxis.plot(plotX, exponentialFit(plotX, *params), '--')[0]
        self.drawnPlotPoints.append(fit)
        self.curFig.canvas.draw_idle()


app = QtWidgets.QApplication(sys.argv)

window = CallistoViewerWindow()

loc = dict()
loc["Alaska Anchorage"] = LocationNameSet("ALASKA-ANCHORAGE", {"01"})
loc["Alaska Cohoe"] = LocationNameSet("ALASKA-COHOE", {"62", "63"})
loc["Alaska Haarp"] = LocationNameSet("ALASKA-HAARP", {"62", "63"})
loc["Algeria Craag"] = LocationNameSet("ALGERIA-CRAAG", {"59"})
loc["Almaty"] =LocationNameSet("ALMATY", {"01"})
loc["Uni Graz"] = LocationNameSet("AUSTRIA-UNIGRAZ", {"01", "02"})
loc["Arecibo Observatory"] = LocationNameSet("Arecibo-Observatory", {"62", "63"})
loc["Australia ASSA"] = LocationNameSet("Australia-ASSA", {"60", "62", "63"})
loc["Bir"] = LocationNameSet("BIR", {"01"})
loc["Denmark"] = LocationNameSet("DENMARK", {"62", "63"})
loc["Alexandria, Egypt"] = LocationNameSet("EGYPT-Alexandria", {"01", "02"})
loc["DLR, Germany"] = LocationNameSet("GERMANY-DLR", {"01"})
loc["Glasgow"] = LocationNameSet("GLASGOW", {"01"})
loc["Humain"] = LocationNameSet("HUMAIN", {"59"})
loc["Hurbanovo"] = LocationNameSet("HURBANOVO", {"59"})
loc["Gauri, India"] = LocationNameSet("INDIA-GAURI", {"59"})
loc["Ooty, India"] = LocationNameSet("INDIA-OOTY", {"01", "02"})
loc["Udaipur, India"] = LocationNameSet("INDIA-UDAIPUR", {"01", "02"})
loc["Indonesia"] = LocationNameSet("INDONESIA", {"59"})
loc["Ibaraki, Japan"] = LocationNameSet("JAPAN-IBARAKI", {"59"})
loc["Kasi"] = LocationNameSet("KASI", {"59"})
loc["Krim"] = LocationNameSet("KRIM", {"00"})
loc["Mexart"] = LocationNameSet("MEXART", {"59"})
loc["Mexico Lance A"] = LocationNameSet("MEXICO-LANCE-A", {"63"})
loc["Mexico Lance B"] = LocationNameSet("MEXICO-LANCE-B", {"62"})
loc["Mongolia UB"] = LocationNameSet("MONGOLIA-UB", {"01"})
loc["MRO"] = LocationNameSet("MRO", {"59", "60", "61", "62"})
loc["MRT 1"] = LocationNameSet("MRT1", {"02"})
loc["MRT 2"] = LocationNameSet("MRT2", {"02"})
loc["Banting, Malaysia"] = LocationNameSet("Malaysia-Banting", {"01"})
loc["NY Aalesund, Norway"] = LocationNameSet("NORWAY-NY-AALESUND", {"01"})
loc["Randaberg, Norway"] = LocationNameSet("NORWAY-RANDABERG", {"01"})
loc["Norway"] = LocationNameSet("Norway", {"01"})
loc["Paraguay"] = LocationNameSet("PARAGUAY", {"01"})
loc["Grotniki, Poland"] = LocationNameSet("POLAND-Grotniki", {"03"})
loc["Romania"] = LocationNameSet("ROMANIA", {"01"})
loc["Roswell, New Mexico, USA"] = LocationNameSet("ROSWELL-NM", {"57", "58", "59"})
loc["Peralejos, Spain"] = LocationNameSet("SPAIN-PERALEJOS", {"01", "03", "04"})
loc["HB9SCT, Switzerland"] = LocationNameSet("SWISS-HB9SCT", {"01"})
loc["Heiterswil, Switzerland"] = LocationNameSet("SWISS-HEITERSWIL", {"59"})
loc["IRSOL, Switzerland"] = LocationNameSet("SWISS-IRSOL", {"01"})
loc["Landschlacht, Switzerland"] = LocationNameSet("SWISS-Landschlacht", {"62", "63"})
loc["Muhen, Switzerland"] = LocationNameSet("SWISS-MUHEN", {"62", "63"})
loc["Pathumthani, Thailand"] = LocationNameSet("THAILAND-Pathumthani", {"62"})
loc["Triest"] = LocationNameSet("TRIEST", {"57", "59", "60"})
loc["Unam"] = LocationNameSet("UNAM", {"59"})
loc["Uruguay"] = LocationNameSet("URUGUAY", {"01"})
loc["ERAU, Arizona, USA"] = LocationNameSet("USA-ARIZONA-ERAU", {"01"})

window.setupLocations(loc)

window.show()
app.exec()


